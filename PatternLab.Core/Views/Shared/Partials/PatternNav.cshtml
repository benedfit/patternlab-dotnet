@model IEnumerable<PatternLab.Core.Models.View>
@{
    var views = PatternLab.Core.Controllers.PatternsController.Provider.Views();
    var types = views.Select(v => v.TypeName).Distinct().ToList();
}
<ol class="sg-nav">
	@foreach (var type in types) {
        var typeName = type;
        var subTypes = views.Where(v => v.TypeName.Equals(typeName, StringComparison.InvariantCultureIgnoreCase)).Select(v => v.SubTypeName).Distinct().ToList();
		<li class="sg-nav-@typeName.ToLower()"><a class="sg-acc-handle">@typeName</a><ol class="sg-acc-panel">
        @foreach (var subType in subTypes) {
            var subTypeName = subType;
            var patterns = views.Where(v => v.TypeName.Equals(typeName, StringComparison.InvariantCultureIgnoreCase) && v.SubTypeName.Equals(subTypeName, StringComparison.InvariantCultureIgnoreCase)).ToList();
            if (!string.IsNullOrEmpty(subTypeName)) {
			    <li class="sg-nav-@subTypeName.ToLower()"><a class="sg-acc-handle">@subTypeName</a><ol class="sg-acc-panel sg-sub-nav">
			    @foreach (var pattern in patterns) {
				    <li><a href="TBC" class="sg-pop {{# patternState }}sg-pattern-state {{ . }}{{/ patternState }}" data-patternpartial="@typeName.ToLower()-TBC">@pattern.DisplayName</a></li>
			    }
                <li><a href="TBC" class="sg-pop" data-patternpartial="viewall-@typeName.ToLower()-@subTypeName.ToLower()">View All</a></li>
			    </ol></li>
		    } else {
                foreach (var pattern in patterns) {
			        <li><a href="TBC" class="sg-pop {{# patternState }}sg-pattern-state {{ . }}{{/ patternState }}" data-patternpartial="@typeName.ToLower()-TBC">@pattern.DisplayName</a></li>
                }
            }
        }
		</ol></li>
	}
	<li><a href="styleguide/html/styleguide.html" class="sg-pop" data-patternpartial="all">All</a></li>
</ol>