@using System.Text;
@using PatternLab.Core.Helpers
@model IEnumerable<PatternLab.Core.Models.Pattern>
@{
    var patterns = PatternLab.Core.Controllers.PatternsController.Provider.Patterns();
    var types = patterns.Select(p => p.Type).Distinct().ToList();
    var typePaths = new StringBuilder();

    foreach (var type in types)
    {
        var typeName = type;
        var subTypes = patterns.Where(p => p.Type.Equals(type, StringComparison.InvariantCultureIgnoreCase)).Select(p => p.SubType).Where(s => !string.IsNullOrEmpty(s)).Distinct().ToList();

        if (!subTypes.Any())
        {
            continue;
        }

        typePaths.AppendFormat("{0}\"{1}\":{{", typePaths.Length > 0 ? "," : string.Empty, typeName.StripOrdinals());

        var subTypePaths = new StringBuilder();

        foreach (var subType in subTypes)
        {
            subTypePaths.AppendFormat("{0}\"{1}\":\"{2}-{3}\"", subTypePaths.Length > 0 ? "," : string.Empty, subType.StripOrdinals(), typeName, subType);
        }

        typePaths.Append(subTypePaths);
        typePaths.Append("}");
    }
}
<script>
    var viewAllPaths = {@Html.Raw(typePaths.ToString())}
</script>