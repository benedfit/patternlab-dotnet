@using System.Linq
@using System.Text;
@using PatternLab.Core.Helpers
@model IEnumerable<PatternLab.Core.Models.Pattern>
@{
    var patterns = Model != null && Model.Any() ? Model : new List<PatternLab.Core.Models.Pattern>();
    var types = patterns.Select(p => p.Type).Distinct().ToList();
    var typePaths = new StringBuilder();

    foreach (var type in types)
    {
        var typeName = type;
        typePaths.AppendFormat("{0}\"{1}\":{{", typePaths.Length > 0 ? "," : string.Empty, typeName.StripOrdinals());

        var subPatterns = patterns.Where(p => p.Type.Equals(typeName, StringComparison.InvariantCultureIgnoreCase)).ToList();
        var patternPaths = new StringBuilder();

        foreach (var pattern in subPatterns)
        {
            patternPaths.AppendFormat("{0}\"{1}\":\"{2}\"", patternPaths.Length > 0 ? "," : string.Empty, pattern.Name.StripOrdinals(), pattern.PathDash);
        }

        typePaths.Append(patternPaths);
        typePaths.Append("}");
    }
}
<script>
    var patternPaths = {@Html.Raw(typePaths.ToString())}
</script>